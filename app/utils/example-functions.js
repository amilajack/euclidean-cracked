const tutorial = [
  {
    name: 'sequencer variables',
    code: `
/*
  The following step sequencer variables are available to your script
    data  :  the value (0 or 1) of the current step
    index :  the position of the current step
    array :   the entire sequence generated by the euclidean rhythm

    load this function, press play, then open your debug console 
    to see these values update on every step of the sequener
*/

console.log('data', data);
console.log('index', index);
console.log('array', array);
`
  },
  {
    name: 'track audio nodes',
    code: `
/*

Each track consists of a chain of audio nodes
[sampler]->[lowpass]->[gain]

The following variables can be used to select and modify
the audio nodes

Audio node selectors
  this.sampler : the node ID for this sampler
  this.lowpass : the node ID for the track's lowpass filter
  this.gain : the node ID for the gain node this sampler is connected to
*/


// play the sample at half speed
__(this.sampler).attr({speed: .5});

// modify the lowpass filter frequency and Q
// on every other step
if (index % 2) {
  __(this.lowpass).attr({frequency: 300, q: 20});
} else {
  __(this.lowpass).attr({frequency: 1200, q: 5});
}
`
  }
];

const effects = [
  {
    name: 'filterSweep',
    code: `
/*
  Use the cracked library's __.scale() to convert the current step index
  into a frequency value for the lowpass filter
*/
// only run if there is a 1 on this step
if (data) {
  var inMin = 0;
  var inMax = array.length;
  var outMin = 200;
  var outMax = 2000;
  var type = 'logarithmic';

  var f = __.scale(index, inMin, inMax, outMin, outMax, type);
  __(this.lowpass).attr({ frequency: f, q: 30 });
}
`
  }];


export default [
  {
    sectionName: 'tutorial',
    examples: tutorial
  },
  {
    sectionName: 'effects',
    examples: effects
  }
];

/*

*/
// if (data) {
//   if (index < 4) {
//     // for steps 0 - 3 of the sequence
//     // randomly change the speed of playback
//     // 1 is normal speed, 2 is double speed, .5 is half speed etc
//     var rand = __.random(1, 20) / 10;
//     __(this.sampler).attr({ speed: rand });
//   }
// }
//
// /*
//
// */
//
// // randomly change lowpass filter cutoff frequency on every step
//
// if (data) {
//   var f = __.random(1000, 4000);
//   __(this.lowpass).attr({ frequency: f, q: 30 });
// }
